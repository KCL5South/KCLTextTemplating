// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Correctly adding templates to the project file")]
    public partial class CorrectlyAddingTemplatesToTheProjectFileFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TextTransformTargets.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Correctly adding templates to the project file", "When I add a file with a .tt extension to the \'None\' ItemGroup\r\nand mark it as KC" +
                    "LTextTemplating\r\nthen it is ran through the KCLTextTemplating program.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Incorrectly Registering Templates")]
        public virtual void IncorrectlyRegisteringTemplates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrectly Registering Templates", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 9
 testRunner.Given("a project file consisting of:", @"<?xml version=""1.0"" encoding=""utf-8""?>
<Project DefaultTarget=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" ToolsVersion=""4.0"">
<ItemGroup>
	<None Include=""Template.tt""/>
</ItemGroup>

<Target Name=""Build"">
	<CallTarget Targets=""KCLTextTemplating""/>
</Target>

<Import Project=""KCLTextTemplating.targets""/>
</Project>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.And("a template file called \"Template.tt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("the template file consists of:", "Some Random Text", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("the project is built", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("there should be no output files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Incorrectly Registering Templates (Should not trigger target at all...)")]
        public virtual void IncorrectlyRegisteringTemplatesShouldNotTriggerTargetAtAll_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrectly Registering Templates (Should not trigger target at all...)", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 33
 testRunner.Given("a project file consisting of:", @"<?xml version=""1.0"" encoding=""utf-8""?>
<Project DefaultTarget=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" ToolsVersion=""4.0"">
<ItemGroup>
	<None Include=""Template2.tt""/>
	<None Include=""Template.tt"">
		<KCLTextTemplating>True</KCLTextTemplating>
	</None>
</ItemGroup>

<Target Name=""Build"">
	<CallTarget Targets=""KCLTextTemplating""/>
</Target>

<Import Project=""KCLTextTemplating.targets""/>
</Project>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("a template file called \"Template.tt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("the template file consists of:", "<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\r\n<#@ output extens" +
                    "ion=\".cs\"#>\r\nSome Random Text", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.When("the project is built", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("the output of the msbuild call should not match this regex:", "Files to process:(.*)Template2.tt", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Incorrect Extension On Templates")]
        public virtual void IncorrectExtensionOnTemplates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect Extension On Templates", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 65
 testRunner.Given("a project file consisting of:", @"<?xml version=""1.0"" encoding=""utf-8""?>
<Project DefaultTarget=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" ToolsVersion=""4.0"">
<ItemGroup>
	<None Include=""Template.someExtension"">
		<KCLTextTemplating>True</KCLTextTemplating>
	</None>
</ItemGroup>

<Target Name=""Build"">
	<CallTarget Targets=""KCLTextTemplating""/>
</Target>

<Import Project=""KCLTextTemplating.targets""/>
</Project>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 82
 testRunner.And("a template file called \"Template.someExtension\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.And("the template file consists of:", "It Doesn\'t matter ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.When("the project is built", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.Then("there should be no output files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Correctly Registering Templates Produces Output")]
        public virtual void CorrectlyRegisteringTemplatesProducesOutput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Correctly Registering Templates Produces Output", ((string[])(null)));
#line 90
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 91
 testRunner.Given("a project file consisting of:", @"<?xml version=""1.0"" encoding=""utf-8""?>
<Project DefaultTarget=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" ToolsVersion=""4.0"">
<ItemGroup>
	<None Include=""Template.tt"">
		<KCLTextTemplating>True</KCLTextTemplating>
	</None>
</ItemGroup>

<Target Name=""Build"">
	<CallTarget Targets=""KCLTextTemplating""/>
</Target>

<Import Project=""KCLTextTemplating.targets""/>
</Project>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 108
 testRunner.And("a template file called \"Template.tt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And("the template file consists of:", "<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\r\n<#@ output extens" +
                    "ion=\".cs\"#>\r\nSome Random Text", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.When("the project is built", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("a file called \"Template.cs\" should exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.And("it should have content of:", "Some Random Text", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Templates with already generated output are skipped")]
        public virtual void TemplatesWithAlreadyGeneratedOutputAreSkipped()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Templates with already generated output are skipped", ((string[])(null)));
#line 122
this.ScenarioSetup(scenarioInfo);
#line 123
 testRunner.Given("a template file called \"Template.tt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 124
 testRunner.And("the template file consists of:", "<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\r\n<#@ output extens" +
                    "ion=\".cs\"#>\r\nSome Random Text", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("a file called \"Template.cs\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
 testRunner.And("a project file consisting of:", @"<?xml version=""1.0"" encoding=""utf-8""?>
<Project DefaultTarget=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" ToolsVersion=""4.0"">
<ItemGroup>
	<None Include=""Template.tt"">
		<KCLTextTemplating>True</KCLTextTemplating>
	</None>
</ItemGroup>

<Target Name=""Build"">
	<CallTarget Targets=""KCLTextTemplating""/>
</Target>

<Import Project=""KCLTextTemplating.targets""/>
</Project>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.When("the project is built", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
 testRunner.Then("the output of the msbuild call should match this regex:", "Skipping target \"KCLTextTemplating\"", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
